!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-input-target	Makefile	/^	objcopy --input-target=elf64-x86-64 --output-target=elf32-i386 $(HYPERBENCH64) $(HYPERBENCH32)$/;"	m
ABORT_EXIT_STATUS	lib/abort.c	16;"	d	file:
APIC_ALL_CPUS	include/apic.h	41;"	d
APIC_ARBPRI	include/apic.h	31;"	d
APIC_ARBPRI_MASK	include/apic.h	32;"	d
APIC_BASE_MSR	include/apic.h	138;"	d
APIC_BSP	include/apic.h	13;"	d
APIC_DEFAULT_PHYS_BASE	include/apic.h	12;"	d
APIC_DEST_ALLBUT	include/apic.h	63;"	d
APIC_DEST_ALLINC	include/apic.h	62;"	d
APIC_DEST_LOGICAL	include/apic.h	71;"	d
APIC_DEST_PHYSICAL	include/apic.h	72;"	d
APIC_DEST_SELF	include/apic.h	61;"	d
APIC_DFR	include/apic.h	42;"	d
APIC_DFR_CLUSTER	include/apic.h	43;"	d
APIC_DFR_FLAT	include/apic.h	44;"	d
APIC_DM_EXTINT	include/apic.h	80;"	d
APIC_DM_FIXED	include/apic.h	73;"	d
APIC_DM_INIT	include/apic.h	78;"	d
APIC_DM_LOWEST	include/apic.h	74;"	d
APIC_DM_NMI	include/apic.h	77;"	d
APIC_DM_REMRD	include/apic.h	76;"	d
APIC_DM_SMI	include/apic.h	75;"	d
APIC_DM_STARTUP	include/apic.h	79;"	d
APIC_EILVT0	include/apic.h	125;"	d
APIC_EILVT1	include/apic.h	134;"	d
APIC_EILVT2	include/apic.h	135;"	d
APIC_EILVT3	include/apic.h	136;"	d
APIC_EILVT_LVTOFF	include/apic.h	128;"	d
APIC_EILVT_MASKED	include/apic.h	133;"	d
APIC_EILVT_MSG_EXT	include/apic.h	132;"	d
APIC_EILVT_MSG_FIX	include/apic.h	129;"	d
APIC_EILVT_MSG_NMI	include/apic.h	131;"	d
APIC_EILVT_MSG_SMI	include/apic.h	130;"	d
APIC_EILVT_NR_AMD_10H	include/apic.h	127;"	d
APIC_EILVT_NR_AMD_K8	include/apic.h	126;"	d
APIC_EIO_ACK	include/apic.h	35;"	d
APIC_EN	include/apic.h	15;"	d
APIC_EOI	include/apic.h	34;"	d
APIC_ESR	include/apic.h	52;"	d
APIC_ESR_ILLREGA	include/apic.h	59;"	d
APIC_ESR_RECVILL	include/apic.h	58;"	d
APIC_ESR_RECV_ACC	include/apic.h	56;"	d
APIC_ESR_RECV_CS	include/apic.h	54;"	d
APIC_ESR_SENDILL	include/apic.h	57;"	d
APIC_ESR_SEND_ACC	include/apic.h	55;"	d
APIC_ESR_SEND_CS	include/apic.h	53;"	d
APIC_EXTD	include/apic.h	14;"	d
APIC_ICR	include/apic.h	60;"	d
APIC_ICR2	include/apic.h	82;"	d
APIC_ICR_BUSY	include/apic.h	70;"	d
APIC_ICR_RR_INPROG	include/apic.h	66;"	d
APIC_ICR_RR_INVALID	include/apic.h	65;"	d
APIC_ICR_RR_MASK	include/apic.h	64;"	d
APIC_ICR_RR_VALID	include/apic.h	67;"	d
APIC_ID	include/apic.h	17;"	d
APIC_INPUT_POLARITY	include/apic.h	102;"	d
APIC_INTEGRATED	include/apic.h	24;"	d
APIC_INTEGRATED	include/apic.h	26;"	d
APIC_INT_ASSERT	include/apic.h	69;"	d
APIC_INT_LEVELTRIG	include/apic.h	68;"	d
APIC_IRR	include/apic.h	51;"	d
APIC_ISR	include/apic.h	48;"	d
APIC_ISR_NR	include/apic.h	49;"	d
APIC_LDR	include/apic.h	37;"	d
APIC_LDR_MASK	include/apic.h	38;"	d
APIC_LVR	include/apic.h	19;"	d
APIC_LVR_MASK	include/apic.h	20;"	d
APIC_LVT0	include/apic.h	88;"	d
APIC_LVT1	include/apic.h	110;"	d
APIC_LVTERR	include/apic.h	111;"	d
APIC_LVTPC	include/apic.h	87;"	d
APIC_LVTT	include/apic.h	85;"	d
APIC_LVTTHMR	include/apic.h	86;"	d
APIC_LVT_LEVEL_TRIGGER	include/apic.h	100;"	d
APIC_LVT_MASKED	include/apic.h	99;"	d
APIC_LVT_REMOTE_IRR	include/apic.h	101;"	d
APIC_LVT_TIMER_BASE_MASK	include/apic.h	89;"	d
APIC_LVT_TIMER_MASK	include/apic.h	95;"	d
APIC_LVT_TIMER_ONESHOT	include/apic.h	96;"	d
APIC_LVT_TIMER_PERIODIC	include/apic.h	97;"	d
APIC_LVT_TIMER_TSCDEADLINE	include/apic.h	98;"	d
APIC_MODE_EXTINT	include/apic.h	109;"	d
APIC_MODE_FIXED	include/apic.h	107;"	d
APIC_MODE_MASK	include/apic.h	104;"	d
APIC_MODE_NMI	include/apic.h	108;"	d
APIC_PROCPRI	include/apic.h	33;"	d
APIC_RRR	include/apic.h	36;"	d
APIC_SELF_IPI	include/apic.h	115;"	d
APIC_SEND_PENDING	include/apic.h	103;"	d
APIC_SPIV	include/apic.h	45;"	d
APIC_SPIV_APIC_ENABLED	include/apic.h	47;"	d
APIC_SPIV_FOCUS_DISABLED	include/apic.h	46;"	d
APIC_TASKPRI	include/apic.h	29;"	d
APIC_TDCR	include/apic.h	114;"	d
APIC_TDR_DIV_1	include/apic.h	117;"	d
APIC_TDR_DIV_128	include/apic.h	124;"	d
APIC_TDR_DIV_16	include/apic.h	121;"	d
APIC_TDR_DIV_2	include/apic.h	118;"	d
APIC_TDR_DIV_32	include/apic.h	122;"	d
APIC_TDR_DIV_4	include/apic.h	119;"	d
APIC_TDR_DIV_64	include/apic.h	123;"	d
APIC_TDR_DIV_8	include/apic.h	120;"	d
APIC_TDR_DIV_TMBASE	include/apic.h	116;"	d
APIC_TIMER_BASE_CLKIN	include/apic.h	92;"	d
APIC_TIMER_BASE_DIV	include/apic.h	94;"	d
APIC_TIMER_BASE_TMBASE	include/apic.h	93;"	d
APIC_TMCCT	include/apic.h	113;"	d
APIC_TMICT	include/apic.h	112;"	d
APIC_TMR	include/apic.h	50;"	d
APIC_TPRI_MASK	include/apic.h	30;"	d
APIC_VECTOR_MASK	include/apic.h	81;"	d
APIC_XAPIC	include/apic.h	28;"	d
AR	Makefile	/^AR = ar$/;"	m
ARCH	Makefile	/^ARCH    := $(shell uname -m)$/;"	m
AS	Makefile	/^AS = gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m64 -I $(BASEDIR)\/include$/;"	m
BASEDIR	Makefile	/^BASEDIR	:= $(shell pwd)$/;"	m
BINSTR_SZ	include/defs.h	55;"	d
BUFSZ	lib/printf.c	12;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CMCI_EN	include/msr.h	102;"	d
CMCI_THRESHOLD_MASK	include/msr.h	103;"	d
COLUMNS	x86_64/console.c	7;"	d	file:
CR0_PE	include/mmu.h	8;"	d
CR0_PG	include/mmu.h	10;"	d
CR0_WP	include/mmu.h	9;"	d
CR4_PSE	include/mmu.h	12;"	d
DEBUGCTLMSR_BTF	include/msr.h	80;"	d
DEBUGCTLMSR_BTINT	include/msr.h	83;"	d
DEBUGCTLMSR_BTS	include/msr.h	82;"	d
DEBUGCTLMSR_BTS_OFF_OS	include/msr.h	84;"	d
DEBUGCTLMSR_BTS_OFF_USR	include/msr.h	85;"	d
DEBUGCTLMSR_FREEZE_LBRS_ON_PMI	include/msr.h	86;"	d
DEBUGCTLMSR_LBR	include/msr.h	79;"	d
DEBUGCTLMSR_TR	include/msr.h	81;"	d
DEVSPACE	include/memlayout.h	5;"	d
DPL_USER	include/mmu.h	53;"	d
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
EFER_FFXSR	include/msr.h	32;"	d
EFER_LMA	include/msr.h	28;"	d
EFER_LME	include/msr.h	27;"	d
EFER_LMSLE	include/msr.h	31;"	d
EFER_NX	include/msr.h	29;"	d
EFER_SCE	include/msr.h	26;"	d
EFER_SVME	include/msr.h	30;"	d
EMBRYO	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
EXTMEM	include/memlayout.h	3;"	d
FAM10H_MMIO_CONF_BASE_MASK	include/msr.h	136;"	d
FAM10H_MMIO_CONF_BASE_SHIFT	include/msr.h	137;"	d
FAM10H_MMIO_CONF_BUSRANGE_MASK	include/msr.h	134;"	d
FAM10H_MMIO_CONF_BUSRANGE_SHIFT	include/msr.h	135;"	d
FAM10H_MMIO_CONF_ENABLE	include/msr.h	133;"	d
FEATURE_CONTROL_LOCKED	include/msr.h	212;"	d
FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX	include/msr.h	213;"	d
FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX	include/msr.h	214;"	d
FL_IF	include/mmu.h	5;"	d
FSSIZE	include/param.h	13;"	d
GET_APIC_DELIVERY_MODE	include/apic.h	105;"	d
GET_APIC_DEST_FIELD	include/apic.h	83;"	d
GET_APIC_LOGICAL_ID	include/apic.h	39;"	d
GET_APIC_MAXLVT	include/apic.h	22;"	d
GET_APIC_TIMER_BASE	include/apic.h	90;"	d
GET_APIC_VERSION	include/apic.h	21;"	d
GET_RETURN_ADDRESS	lib/stack.c	67;"	d	file:
GET_RETURN_ADDRESS	lib/stack.c	98;"	d	file:
HYPERBENCH32	Makefile	/^HYPERBENCH32 := hyperbench.32$/;"	m
HYPERBENCH64	Makefile	/^HYPERBENCH64 := hyperbench.64$/;"	m
HYPERBENCH_DIRS	Makefile	/^HYPERBENCH_DIRS         := $(ARCH) lib benchmark$/;"	m
ID	x86_64/apic.c	8;"	d	file:
K8_INTP_C1E_ACTIVE_MASK	include/msr.h	146;"	d
K8_MTRRFIXRANGE_DRAM_ENABLE	include/msr.h	148;"	d
K8_MTRRFIXRANGE_DRAM_MODIFY	include/msr.h	149;"	d
K8_MTRR_RDMEM_WRMEM_MASK	include/msr.h	150;"	d
KERNBASE	include/memlayout.h	8;"	d
KERNLINK	include/memlayout.h	9;"	d
KSTACKSIZE	include/param.h	2;"	d
LD	Makefile	/^LD = ld$/;"	m
LOGSIZE	include/param.h	11;"	d
MAX	include/defs.h	15;"	d
MAXARG	include/param.h	9;"	d
MAXOPBLOCKS	include/param.h	10;"	d
MAX_DEPTH	lib/stack.c	12;"	d	file:
MIN	include/defs.h	14;"	d
MPBOOT	include/mp.h	37;"	d
MPBUS	include/mp.h	54;"	d
MPIOAPIC	include/mp.h	55;"	d
MPIOINTR	include/mp.h	56;"	d
MPLINTR	include/mp.h	57;"	d
MPPROC	include/mp.h	53;"	d
MSR_AMD64_DC_CFG	include/msr.h	118;"	d
MSR_AMD64_IBSCTL	include/msr.h	129;"	d
MSR_AMD64_IBSDCLINAD	include/msr.h	127;"	d
MSR_AMD64_IBSDCPHYSAD	include/msr.h	128;"	d
MSR_AMD64_IBSFETCHCTL	include/msr.h	119;"	d
MSR_AMD64_IBSFETCHLINAD	include/msr.h	120;"	d
MSR_AMD64_IBSFETCHPHYSAD	include/msr.h	121;"	d
MSR_AMD64_IBSOPCTL	include/msr.h	122;"	d
MSR_AMD64_IBSOPDATA	include/msr.h	124;"	d
MSR_AMD64_IBSOPDATA2	include/msr.h	125;"	d
MSR_AMD64_IBSOPDATA3	include/msr.h	126;"	d
MSR_AMD64_IBSOPRIP	include/msr.h	123;"	d
MSR_AMD64_NB_CFG	include/msr.h	114;"	d
MSR_AMD64_OSVW_ID_LENGTH	include/msr.h	116;"	d
MSR_AMD64_OSVW_STATUS	include/msr.h	117;"	d
MSR_AMD64_PATCH_LEVEL	include/msr.h	113;"	d
MSR_AMD64_PATCH_LOADER	include/msr.h	115;"	d
MSR_CORE_PERF_FIXED_CTR0	include/msr.h	378;"	d
MSR_CORE_PERF_FIXED_CTR1	include/msr.h	379;"	d
MSR_CORE_PERF_FIXED_CTR2	include/msr.h	380;"	d
MSR_CORE_PERF_FIXED_CTR_CTRL	include/msr.h	381;"	d
MSR_CORE_PERF_GLOBAL_CTRL	include/msr.h	383;"	d
MSR_CORE_PERF_GLOBAL_OVF_CTRL	include/msr.h	384;"	d
MSR_CORE_PERF_GLOBAL_STATUS	include/msr.h	382;"	d
MSR_CSTAR	include/msr.h	10;"	d
MSR_EFER	include/msr.h	7;"	d
MSR_FAM10H_MMIO_CONF_BASE	include/msr.h	132;"	d
MSR_FAM10H_NODE_ID	include/msr.h	138;"	d
MSR_FSB_FREQ	include/msr.h	40;"	d
MSR_FS_BASE	include/msr.h	12;"	d
MSR_GEODE_BUSCONT_CONF0	include/msr.h	387;"	d
MSR_GS_BASE	include/msr.h	13;"	d
MSR_IA32_APERF	include/msr.h	228;"	d
MSR_IA32_APICBASE	include/msr.h	216;"	d
MSR_IA32_APICBASE_BASE	include/msr.h	219;"	d
MSR_IA32_APICBASE_BSP	include/msr.h	217;"	d
MSR_IA32_APICBASE_ENABLE	include/msr.h	218;"	d
MSR_IA32_BBL_CR_CTL	include/msr.h	43;"	d
MSR_IA32_CR_PAT	include/msr.h	70;"	d
MSR_IA32_DEBUGCTLMSR	include/msr.h	72;"	d
MSR_IA32_DS_AREA	include/msr.h	54;"	d
MSR_IA32_EBL_CR_POWERON	include/msr.h	208;"	d
MSR_IA32_FEATURE_CONTROL	include/msr.h	209;"	d
MSR_IA32_LASTBRANCHFROMIP	include/msr.h	73;"	d
MSR_IA32_LASTBRANCHTOIP	include/msr.h	74;"	d
MSR_IA32_LASTINTFROMIP	include/msr.h	75;"	d
MSR_IA32_LASTINTTOIP	include/msr.h	76;"	d
MSR_IA32_MC0_ADDR	include/msr.h	90;"	d
MSR_IA32_MC0_CTL	include/msr.h	88;"	d
MSR_IA32_MC0_CTL2	include/msr.h	99;"	d
MSR_IA32_MC0_MISC	include/msr.h	91;"	d
MSR_IA32_MC0_STATUS	include/msr.h	89;"	d
MSR_IA32_MCG_CAP	include/msr.h	49;"	d
MSR_IA32_MCG_CTL	include/msr.h	51;"	d
MSR_IA32_MCG_EAX	include/msr.h	278;"	d
MSR_IA32_MCG_EBP	include/msr.h	284;"	d
MSR_IA32_MCG_EBX	include/msr.h	279;"	d
MSR_IA32_MCG_ECX	include/msr.h	280;"	d
MSR_IA32_MCG_EDI	include/msr.h	283;"	d
MSR_IA32_MCG_EDX	include/msr.h	281;"	d
MSR_IA32_MCG_EFLAGS	include/msr.h	286;"	d
MSR_IA32_MCG_EIP	include/msr.h	287;"	d
MSR_IA32_MCG_ESI	include/msr.h	282;"	d
MSR_IA32_MCG_ESP	include/msr.h	285;"	d
MSR_IA32_MCG_RESERVED	include/msr.h	288;"	d
MSR_IA32_MCG_STATUS	include/msr.h	50;"	d
MSR_IA32_MCx_ADDR	include/msr.h	95;"	d
MSR_IA32_MCx_CTL	include/msr.h	93;"	d
MSR_IA32_MCx_CTL2	include/msr.h	100;"	d
MSR_IA32_MCx_MISC	include/msr.h	96;"	d
MSR_IA32_MCx_STATUS	include/msr.h	94;"	d
MSR_IA32_MISC_ENABLE	include/msr.h	244;"	d
MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE	include/msr.h	270;"	d
MSR_IA32_MISC_ENABLE_BTS_UNAVAIL	include/msr.h	252;"	d
MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE	include/msr.h	273;"	d
MSR_IA32_MISC_ENABLE_EMON	include/msr.h	251;"	d
MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP	include/msr.h	254;"	d
MSR_IA32_MISC_ENABLE_FAST_STRING	include/msr.h	249;"	d
MSR_IA32_MISC_ENABLE_FERR	include/msr.h	267;"	d
MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX	include/msr.h	268;"	d
MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE	include/msr.h	275;"	d
MSR_IA32_MISC_ENABLE_L1D_CONTEXT	include/msr.h	272;"	d
MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE	include/msr.h	264;"	d
MSR_IA32_MISC_ENABLE_LIMIT_CPUID	include/msr.h	256;"	d
MSR_IA32_MISC_ENABLE_MWAIT	include/msr.h	255;"	d
MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL	include/msr.h	253;"	d
MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE	include/msr.h	266;"	d
MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK	include/msr.h	271;"	d
MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE	include/msr.h	263;"	d
MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK	include/msr.h	265;"	d
MSR_IA32_MISC_ENABLE_TCC	include/msr.h	250;"	d
MSR_IA32_MISC_ENABLE_TM1	include/msr.h	262;"	d
MSR_IA32_MISC_ENABLE_TM2	include/msr.h	269;"	d
MSR_IA32_MISC_ENABLE_TURBO_DISABLE	include/msr.h	274;"	d
MSR_IA32_MISC_ENABLE_X87_COMPAT	include/msr.h	261;"	d
MSR_IA32_MISC_ENABLE_XD_DISABLE	include/msr.h	258;"	d
MSR_IA32_MISC_ENABLE_XTPR_DISABLE	include/msr.h	257;"	d
MSR_IA32_MPERF	include/msr.h	227;"	d
MSR_IA32_P5_MC_ADDR	include/msr.h	204;"	d
MSR_IA32_P5_MC_TYPE	include/msr.h	205;"	d
MSR_IA32_PEBS_ENABLE	include/msr.h	53;"	d
MSR_IA32_PERFCTR0	include/msr.h	38;"	d
MSR_IA32_PERFCTR1	include/msr.h	39;"	d
MSR_IA32_PERF_CAPABILITIES	include/msr.h	55;"	d
MSR_IA32_PERF_CTL	include/msr.h	225;"	d
MSR_IA32_PERF_STATUS	include/msr.h	224;"	d
MSR_IA32_PLATFORM_ID	include/msr.h	207;"	d
MSR_IA32_PRED_CMD	include/msr.h	36;"	d
MSR_IA32_SPEC_CTRL	include/msr.h	35;"	d
MSR_IA32_SYSENTER_CS	include/msr.h	45;"	d
MSR_IA32_SYSENTER_EIP	include/msr.h	47;"	d
MSR_IA32_SYSENTER_ESP	include/msr.h	46;"	d
MSR_IA32_TEMPERATURE_TARGET	include/msr.h	246;"	d
MSR_IA32_THERM_CONTROL	include/msr.h	230;"	d
MSR_IA32_THERM_INTERRUPT	include/msr.h	231;"	d
MSR_IA32_THERM_STATUS	include/msr.h	236;"	d
MSR_IA32_TSC	include/msr.h	206;"	d
MSR_IA32_TSCDEADLINE	include/msr.h	408;"	d
MSR_IA32_TSC_ADJUST	include/msr.h	210;"	d
MSR_IA32_UCODE_REV	include/msr.h	222;"	d
MSR_IA32_UCODE_WRITE	include/msr.h	221;"	d
MSR_IA32_VMX_BASIC	include/msr.h	390;"	d
MSR_IA32_VMX_CR0_FIXED0	include/msr.h	396;"	d
MSR_IA32_VMX_CR0_FIXED1	include/msr.h	397;"	d
MSR_IA32_VMX_CR4_FIXED0	include/msr.h	398;"	d
MSR_IA32_VMX_CR4_FIXED1	include/msr.h	399;"	d
MSR_IA32_VMX_ENTRY_CTLS	include/msr.h	394;"	d
MSR_IA32_VMX_EPT_VPID_CAP	include/msr.h	402;"	d
MSR_IA32_VMX_EXIT_CTLS	include/msr.h	393;"	d
MSR_IA32_VMX_MISC	include/msr.h	395;"	d
MSR_IA32_VMX_PINBASED_CTLS	include/msr.h	391;"	d
MSR_IA32_VMX_PROCBASED_CTLS	include/msr.h	392;"	d
MSR_IA32_VMX_PROCBASED_CTLS2	include/msr.h	401;"	d
MSR_IA32_VMX_TRUE_ENTRY	include/msr.h	406;"	d
MSR_IA32_VMX_TRUE_EXIT	include/msr.h	405;"	d
MSR_IA32_VMX_TRUE_PIN	include/msr.h	403;"	d
MSR_IA32_VMX_TRUE_PROC	include/msr.h	404;"	d
MSR_IA32_VMX_VMCS_ENUM	include/msr.h	400;"	d
MSR_IDT_FCR1	include/msr.h	176;"	d
MSR_IDT_FCR2	include/msr.h	177;"	d
MSR_IDT_FCR3	include/msr.h	178;"	d
MSR_IDT_FCR4	include/msr.h	179;"	d
MSR_IDT_MCR0	include/msr.h	181;"	d
MSR_IDT_MCR1	include/msr.h	182;"	d
MSR_IDT_MCR2	include/msr.h	183;"	d
MSR_IDT_MCR3	include/msr.h	184;"	d
MSR_IDT_MCR4	include/msr.h	185;"	d
MSR_IDT_MCR5	include/msr.h	186;"	d
MSR_IDT_MCR6	include/msr.h	187;"	d
MSR_IDT_MCR7	include/msr.h	188;"	d
MSR_IDT_MCR_CTRL	include/msr.h	189;"	d
MSR_K6_EFER	include/msr.h	167;"	d
MSR_K6_EPMR	include/msr.h	171;"	d
MSR_K6_PFIR	include/msr.h	173;"	d
MSR_K6_PSOR	include/msr.h	172;"	d
MSR_K6_STAR	include/msr.h	168;"	d
MSR_K6_UWCCR	include/msr.h	170;"	d
MSR_K6_WHCR	include/msr.h	169;"	d
MSR_K7_CLK_CTL	include/msr.h	161;"	d
MSR_K7_EVNTSEL0	include/msr.h	153;"	d
MSR_K7_EVNTSEL1	include/msr.h	155;"	d
MSR_K7_EVNTSEL2	include/msr.h	157;"	d
MSR_K7_EVNTSEL3	include/msr.h	159;"	d
MSR_K7_FID_VID_CTL	include/msr.h	163;"	d
MSR_K7_FID_VID_STATUS	include/msr.h	164;"	d
MSR_K7_HWCR	include/msr.h	162;"	d
MSR_K7_PERFCTR0	include/msr.h	154;"	d
MSR_K7_PERFCTR1	include/msr.h	156;"	d
MSR_K7_PERFCTR2	include/msr.h	158;"	d
MSR_K7_PERFCTR3	include/msr.h	160;"	d
MSR_K8_INT_PENDING_MSG	include/msr.h	144;"	d
MSR_K8_SYSCFG	include/msr.h	143;"	d
MSR_K8_TOP_MEM1	include/msr.h	141;"	d
MSR_K8_TOP_MEM2	include/msr.h	142;"	d
MSR_K8_TSEG_ADDR	include/msr.h	147;"	d
MSR_KERNEL_GS_BASE	include/msr.h	14;"	d
MSR_LSTAR	include/msr.h	9;"	d
MSR_MTRRcap	include/msr.h	42;"	d
MSR_MTRRdefType	include/msr.h	68;"	d
MSR_MTRRfix16K_80000	include/msr.h	58;"	d
MSR_MTRRfix16K_A0000	include/msr.h	59;"	d
MSR_MTRRfix4K_C0000	include/msr.h	60;"	d
MSR_MTRRfix4K_C8000	include/msr.h	61;"	d
MSR_MTRRfix4K_D0000	include/msr.h	62;"	d
MSR_MTRRfix4K_D8000	include/msr.h	63;"	d
MSR_MTRRfix4K_E0000	include/msr.h	64;"	d
MSR_MTRRfix4K_E8000	include/msr.h	65;"	d
MSR_MTRRfix4K_F0000	include/msr.h	66;"	d
MSR_MTRRfix4K_F8000	include/msr.h	67;"	d
MSR_MTRRfix64K_00000	include/msr.h	57;"	d
MSR_P4_ALF_ESCR0	include/msr.h	327;"	d
MSR_P4_ALF_ESCR1	include/msr.h	328;"	d
MSR_P4_BPU_CCCR0	include/msr.h	309;"	d
MSR_P4_BPU_CCCR1	include/msr.h	310;"	d
MSR_P4_BPU_CCCR2	include/msr.h	311;"	d
MSR_P4_BPU_CCCR3	include/msr.h	312;"	d
MSR_P4_BPU_ESCR0	include/msr.h	329;"	d
MSR_P4_BPU_ESCR1	include/msr.h	330;"	d
MSR_P4_BPU_PERFCTR0	include/msr.h	291;"	d
MSR_P4_BPU_PERFCTR1	include/msr.h	292;"	d
MSR_P4_BPU_PERFCTR2	include/msr.h	293;"	d
MSR_P4_BPU_PERFCTR3	include/msr.h	294;"	d
MSR_P4_BSU_ESCR0	include/msr.h	331;"	d
MSR_P4_BSU_ESCR1	include/msr.h	332;"	d
MSR_P4_CRU_ESCR0	include/msr.h	333;"	d
MSR_P4_CRU_ESCR1	include/msr.h	334;"	d
MSR_P4_CRU_ESCR2	include/msr.h	335;"	d
MSR_P4_CRU_ESCR3	include/msr.h	336;"	d
MSR_P4_CRU_ESCR4	include/msr.h	337;"	d
MSR_P4_CRU_ESCR5	include/msr.h	338;"	d
MSR_P4_DAC_ESCR0	include/msr.h	339;"	d
MSR_P4_DAC_ESCR1	include/msr.h	340;"	d
MSR_P4_FIRM_ESCR0	include/msr.h	341;"	d
MSR_P4_FIRM_ESCR1	include/msr.h	342;"	d
MSR_P4_FLAME_CCCR0	include/msr.h	317;"	d
MSR_P4_FLAME_CCCR1	include/msr.h	318;"	d
MSR_P4_FLAME_CCCR2	include/msr.h	319;"	d
MSR_P4_FLAME_CCCR3	include/msr.h	320;"	d
MSR_P4_FLAME_ESCR0	include/msr.h	343;"	d
MSR_P4_FLAME_ESCR1	include/msr.h	344;"	d
MSR_P4_FLAME_PERFCTR0	include/msr.h	299;"	d
MSR_P4_FLAME_PERFCTR1	include/msr.h	300;"	d
MSR_P4_FLAME_PERFCTR2	include/msr.h	301;"	d
MSR_P4_FLAME_PERFCTR3	include/msr.h	302;"	d
MSR_P4_FSB_ESCR0	include/msr.h	345;"	d
MSR_P4_FSB_ESCR1	include/msr.h	346;"	d
MSR_P4_IQ_CCCR0	include/msr.h	321;"	d
MSR_P4_IQ_CCCR1	include/msr.h	322;"	d
MSR_P4_IQ_CCCR2	include/msr.h	323;"	d
MSR_P4_IQ_CCCR3	include/msr.h	324;"	d
MSR_P4_IQ_CCCR4	include/msr.h	325;"	d
MSR_P4_IQ_CCCR5	include/msr.h	326;"	d
MSR_P4_IQ_ESCR0	include/msr.h	347;"	d
MSR_P4_IQ_ESCR1	include/msr.h	348;"	d
MSR_P4_IQ_PERFCTR0	include/msr.h	303;"	d
MSR_P4_IQ_PERFCTR1	include/msr.h	304;"	d
MSR_P4_IQ_PERFCTR2	include/msr.h	305;"	d
MSR_P4_IQ_PERFCTR3	include/msr.h	306;"	d
MSR_P4_IQ_PERFCTR4	include/msr.h	307;"	d
MSR_P4_IQ_PERFCTR5	include/msr.h	308;"	d
MSR_P4_IS_ESCR0	include/msr.h	349;"	d
MSR_P4_IS_ESCR1	include/msr.h	350;"	d
MSR_P4_ITLB_ESCR0	include/msr.h	351;"	d
MSR_P4_ITLB_ESCR1	include/msr.h	352;"	d
MSR_P4_IX_ESCR0	include/msr.h	353;"	d
MSR_P4_IX_ESCR1	include/msr.h	354;"	d
MSR_P4_MOB_ESCR0	include/msr.h	355;"	d
MSR_P4_MOB_ESCR1	include/msr.h	356;"	d
MSR_P4_MS_CCCR0	include/msr.h	313;"	d
MSR_P4_MS_CCCR1	include/msr.h	314;"	d
MSR_P4_MS_CCCR2	include/msr.h	315;"	d
MSR_P4_MS_CCCR3	include/msr.h	316;"	d
MSR_P4_MS_ESCR0	include/msr.h	357;"	d
MSR_P4_MS_ESCR1	include/msr.h	358;"	d
MSR_P4_MS_PERFCTR0	include/msr.h	295;"	d
MSR_P4_MS_PERFCTR1	include/msr.h	296;"	d
MSR_P4_MS_PERFCTR2	include/msr.h	297;"	d
MSR_P4_MS_PERFCTR3	include/msr.h	298;"	d
MSR_P4_PEBS_MATRIX_VERT	include/msr.h	375;"	d
MSR_P4_PMH_ESCR0	include/msr.h	359;"	d
MSR_P4_PMH_ESCR1	include/msr.h	360;"	d
MSR_P4_RAT_ESCR0	include/msr.h	361;"	d
MSR_P4_RAT_ESCR1	include/msr.h	362;"	d
MSR_P4_SAAT_ESCR0	include/msr.h	363;"	d
MSR_P4_SAAT_ESCR1	include/msr.h	364;"	d
MSR_P4_SSU_ESCR0	include/msr.h	365;"	d
MSR_P4_SSU_ESCR1	include/msr.h	366;"	d
MSR_P4_TBPU_ESCR0	include/msr.h	368;"	d
MSR_P4_TBPU_ESCR1	include/msr.h	369;"	d
MSR_P4_TC_ESCR0	include/msr.h	370;"	d
MSR_P4_TC_ESCR1	include/msr.h	371;"	d
MSR_P4_U2L_ESCR0	include/msr.h	372;"	d
MSR_P4_U2L_ESCR1	include/msr.h	373;"	d
MSR_P6_EVNTSEL0	include/msr.h	107;"	d
MSR_P6_EVNTSEL1	include/msr.h	108;"	d
MSR_P6_PERFCTR0	include/msr.h	105;"	d
MSR_P6_PERFCTR1	include/msr.h	106;"	d
MSR_STAR	include/msr.h	8;"	d
MSR_SYSCALL_MASK	include/msr.h	11;"	d
MSR_THERM2_CTL	include/msr.h	240;"	d
MSR_THERM2_CTL_TM_SELECT	include/msr.h	242;"	d
MSR_TMTA_LONGRUN_CTRL	include/msr.h	198;"	d
MSR_TMTA_LONGRUN_FLAGS	include/msr.h	199;"	d
MSR_TMTA_LRTI_READOUT	include/msr.h	200;"	d
MSR_TMTA_LRTI_VOLT_MHZ	include/msr.h	201;"	d
MSR_TSC_AUX	include/msr.h	15;"	d
MSR_VIA_BCR2	include/msr.h	195;"	d
MSR_VIA_FCR	include/msr.h	192;"	d
MSR_VIA_LONGHAUL	include/msr.h	193;"	d
MSR_VIA_RNG	include/msr.h	194;"	d
MSR_VM_CR	include/msr.h	412;"	d
MSR_VM_HSAVE_PA	include/msr.h	414;"	d
MSR_VM_IGNNE	include/msr.h	413;"	d
MULTIBOOT_HEADER_FLAGS	x86_64/cstart.S	/^#define MULTIBOOT_HEADER_FLAGS 0x00000000$/;"	d
MULTIBOOT_HEADER_MAGIC	x86_64/cstart.S	/^#define MULTIBOOT_HEADER_MAGIC 0x1BADB002$/;"	d
NBUF	include/param.h	12;"	d
NCPU	include/param.h	3;"	d
NDEV	include/param.h	7;"	d
NFILE	include/param.h	5;"	d
NINODE	include/param.h	6;"	d
NOFILE	include/param.h	4;"	d
NPDENTRIES	include/mmu.h	83;"	d
NPROC	include/param.h	1;"	d
NPTENTRIES	include/mmu.h	84;"	d
NSEGS	include/mmu.h	22;"	d
OBJCOPY	Makefile	/^OBJCOPY = objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
P2V	include/memlayout.h	12;"	d
P2V_WO	include/memlayout.h	15;"	d
PAGE_SIZE	include/mmu.h	85;"	d
PDX	include/mmu.h	74;"	d
PDXSHIFT	include/mmu.h	88;"	d
PGADDR	include/mmu.h	80;"	d
PGROUNDDOWN	include/mmu.h	91;"	d
PGROUNDUP	include/mmu.h	90;"	d
PHYSTOP	include/memlayout.h	4;"	d
PTE_ADDR	include/mmu.h	100;"	d
PTE_FLAGS	include/mmu.h	101;"	d
PTE_P	include/mmu.h	94;"	d
PTE_PS	include/mmu.h	97;"	d
PTE_U	include/mmu.h	96;"	d
PTE_W	include/mmu.h	95;"	d
PTX	include/mmu.h	77;"	d
PTXSHIFT	include/mmu.h	87;"	d
R	include/processor.h	4;"	d
R	include/processor.h	8;"	d
ROOTDEV	include/param.h	8;"	d
ROWS	x86_64/console.c	6;"	d	file:
RUNNABLE	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
S	include/processor.h	10;"	d
S	include/processor.h	6;"	d
SEG	include/mmu.h	43;"	d
SEG16	include/mmu.h	47;"	d
SEG_ASM	include/asm.h	11;"	d
SEG_KCODE	include/mmu.h	15;"	d
SEG_KDATA	include/mmu.h	16;"	d
SEG_NULLASM	include/asm.h	5;"	d
SEG_TSS	include/mmu.h	19;"	d
SEG_UCODE	include/mmu.h	17;"	d
SEG_UDATA	include/mmu.h	18;"	d
SETGATE	include/mmu.h	168;"	d
SET_APIC_DELIVERY_MODE	include/apic.h	106;"	d
SET_APIC_DEST_FIELD	include/apic.h	84;"	d
SET_APIC_LOGICAL_ID	include/apic.h	40;"	d
SET_APIC_TIMER_BASE	include/apic.h	91;"	d
SLEEPING	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STA_R	include/asm.h	18;"	d
STA_R	include/mmu.h	58;"	d
STA_W	include/asm.h	17;"	d
STA_W	include/mmu.h	57;"	d
STA_X	include/asm.h	16;"	d
STA_X	include/mmu.h	56;"	d
STS_IG32	include/mmu.h	62;"	d
STS_T32A	include/mmu.h	61;"	d
STS_TG32	include/mmu.h	63;"	d
THERM_INT_HIGH_ENABLE	include/msr.h	234;"	d
THERM_INT_LOW_ENABLE	include/msr.h	233;"	d
THERM_STATUS_PROCHOT	include/msr.h	238;"	d
TRIGGER_EDGE	include/apic.h	/^	TRIGGER_EDGE = 0,$/;"	e	enum:trigger_mode
TRIGGER_LEVEL	include/apic.h	/^	TRIGGER_LEVEL,$/;"	e	enum:trigger_mode
TRIGGER_MAX	include/apic.h	/^	TRIGGER_MAX,$/;"	e	enum:trigger_mode
UNUSED	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
V2P	include/memlayout.h	11;"	d
V2P_WO	include/memlayout.h	14;"	d
W	include/processor.h	5;"	d
W	include/processor.h	9;"	d
ZOMBIE	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_ASM_GENERIC_SPINLOCK_H_	include/spinlock.h	2;"	d
_ASM_X86_IO_H_	include/io.h	2;"	d
_ASM_X86_MSR_INDEX_H	include/msr.h	2;"	d
_EFER_FFXSR	include/msr.h	24;"	d
_EFER_LMA	include/msr.h	20;"	d
_EFER_LME	include/msr.h	19;"	d
_EFER_LMSLE	include/msr.h	23;"	d
_EFER_NX	include/msr.h	21;"	d
_EFER_SCE	include/msr.h	18;"	d
_EFER_SVME	include/msr.h	22;"	d
_STACK_H_	include/stack.h	8;"	d
__APIC_H	include/apic.h	3;"	d
__BARE_METAL	include/defs.h	10;"	d
__DEFS_H	include/defs.h	3;"	d
__iomem	include/io.h	4;"	d
__unused	include/defs.h	12;"	d
abort	lib/abort.c	/^void abort(void)$/;"	f
addchar	lib/printf.c	/^static void addchar(pstream_t *p, char c)$/;"	f	file:
added	lib/printf.c	/^    int added;$/;"	m	struct:pstream	file:
addr	include/mp.h	/^  int addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
alternate	lib/printf.c	/^    bool alternate;$/;"	m	struct:strprops	file:
apic_get_tpr	x86_64/apic.c	/^uint8_t apic_get_tpr(void)$/;"	f
apic_icr_write	x86_64/apic.c	/^void apic_icr_write(u32 val, u32 dest)$/;"	f
apic_id	x86_64/apic.c	/^uint32_t apic_id(void)$/;"	f
apic_ops	x86_64/apic.c	/^static const struct apic_ops *apic_ops = &xapic_ops;$/;"	v	typeref:struct:apic_ops	file:
apic_ops	x86_64/apic.c	/^struct apic_ops {$/;"	s	file:
apic_read	x86_64/apic.c	/^u32 apic_read(unsigned reg)$/;"	f
apic_read_bit	x86_64/apic.c	/^bool apic_read_bit(unsigned reg, int n)$/;"	f
apic_set_tpr	x86_64/apic.c	/^void apic_set_tpr(uint8_t tpr)$/;"	f
apic_write	x86_64/apic.c	/^void apic_write(unsigned reg, u32 val)$/;"	f
apicid	include/mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	include/proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	include/mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
args	include/mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
assert	include/defs.h	59;"	d
atol	lib/string.c	/^long atol(const char *ptr)$/;"	f
autodepend-flags	Makefile	/^autodepend-flags = -MMD -MF $(dir $*).$(notdir $*).d$/;"	m
avl	include/mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
backtrace	lib/stack.c	/^int backtrace(const void **return_addrs, int max_depth)$/;"	f
backtrace_frame	include/stack.h	/^backtrace_frame(const void *frame __unused, const void **return_addrs __unused,$/;"	f
base_15_0	include/mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	include/mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	include/mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
base_addr	include/multiboot.h	/^    uint64_t base_addr;$/;"	m	struct:mmap_entry_t
binstr	lib/printf.c	/^void binstr(unsigned long x, char out[BINSTR_SZ])$/;"	f
bool	include/types.h	/^typedef _Bool           bool;$/;"	t
boot_device	include/multiboot.h	/^        u32 boot_device;$/;"	m	struct:mbi_bootinfo
bootloader	include/multiboot.h	/^        u32 bootloader;$/;"	m	struct:mbi_bootinfo
buffer	lib/printf.c	/^    char *buffer;$/;"	m	struct:pstream	file:
chan	include/proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
checksum	include/mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	include/mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
cli	include/processor.h	/^static inline void cli(void)$/;"	f
cmdline	include/multiboot.h	/^        u32 cmdline;$/;"	m	struct:mbi_bootinfo
console_clear	x86_64/console.c	/^void console_clear()$/;"	f
console_cleared	x86_64/console.c	/^static int console_cleared = 0;$/;"	v	file:
console_init	x86_64/console.c	/^void console_init()$/;"	f
console_putc	x86_64/console.c	/^void console_putc(char ch)$/;"	f
console_puts	x86_64/console.c	/^void console_puts(const char *buf)$/;"	f
context	include/proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	include/proc.h	/^struct context {$/;"	s
cpu	include/proc.h	/^struct cpu {$/;"	s
cpus	x86_64/mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	include/mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
cs	include/mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	include/mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cur_x	x86_64/console.c	/^static unsigned int cur_x, cur_y;$/;"	v	file:
cur_y	x86_64/console.c	/^static unsigned int cur_x, cur_y;$/;"	v	file:
cwd	include/proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
db	include/mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
delivery_mode	include/apic.h	/^    uint8_t delivery_mode:3;$/;"	m	struct:__anon1
delivery_status	include/apic.h	/^    uint8_t delivery_status:1;$/;"	m	struct:__anon1
dest_id	include/apic.h	/^    uint8_t dest_id;$/;"	m	struct:__anon1
dest_mode	include/apic.h	/^    uint8_t dest_mode:1;$/;"	m	struct:__anon1
digits	lib/printf.c	/^static char digits[16] = "0123456789abcdef";$/;"	v	file:
disable_apic	x86_64/apic.c	/^void disable_apic(void)$/;"	f
dpl	include/mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	include/mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	include/mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
dump_frame_stack	lib/stack.c	/^void dump_frame_stack(const void *instruction, const void *frame)$/;"	f
dump_stack	lib/stack.c	/^void dump_stack(void)$/;"	f
early_mem_init	x86_64/heap.c	/^void early_mem_init(uintptr_t base_addr, struct mbi_bootinfo *bootinfo)$/;"	f
eax	include/mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
ebp	include/mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	include/proc.h	/^  uint ebp;$/;"	m	struct:context
ebx	include/mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	include/proc.h	/^  uint ebx;$/;"	m	struct:context
ecx	include/mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
edi	include/mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	include/proc.h	/^  uint edi;$/;"	m	struct:context
edx	include/mmu.h	/^  uint edx;$/;"	m	struct:taskstate
efer	x86_64/cstart.S	/^efer = 0xC0000080$/;"	d
eflags	include/mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eip	include/mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	include/proc.h	/^  uint eip;$/;"	m	struct:context
enable_apic	x86_64/apic.c	/^void enable_apic(void)$/;"	f
enable_x2apic	x86_64/apic.c	/^int enable_x2apic(void)$/;"	f
enter_long_mode	x86_64/cstart.S	/^enter_long_mode:$/;"	l
entry	include/mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entry	x86_64/cstart.S	/^entry:$/;"	l
eoi	x86_64/apic.c	/^void eoi(void)$/;"	f
es	include/mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
esi	include/mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	include/proc.h	/^  uint esi;$/;"	m	struct:context
esp	include/mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp0	include/mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	include/mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	include/mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exit	x86_64/serial.c	/^void exit(int code)$/;"	f
false	include/types.h	15;"	d
feature	include/mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
flags	include/mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	include/mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
flags	include/multiboot.h	/^        u32 flags;$/;"	m	struct:mbi_bootinfo
fmtnum	lib/printf.c	/^static int fmtnum(const char **fmt)$/;"	f	file:
freelist	x86_64/heap.c	/^static void *freelist = 0;$/;"	v	file:
fs	include/mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
g	include/mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
g_apic	x86_64/apic.c	/^void *g_apic = (void *)0xfee00000;$/;"	v
g_ioapic	x86_64/apic.c	/^void *g_ioapic = (void *)0xfec00000;$/;"	v
gatedesc	include/mmu.h	/^struct gatedesc {$/;"	s
gdt	include/proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt	x86_64/entryother.S	/^gdt:$/;"	l
gdt64	x86_64/cstart.S	/^gdt64:$/;"	l
gdt64_desc	x86_64/cstart.S	/^gdt64_desc:$/;"	l
gdt64_end	x86_64/cstart.S	/^gdt64_end:$/;"	l
gdtdesc	x86_64/entryother.S	/^gdtdesc:$/;"	l
get_free_pages	x86_64/heap.c	/^void *get_free_pages(void *mem, unsigned long size)$/;"	f
get_memory_map	x86_64/heap.c	/^void get_memory_map(struct mbi_bootinfo *glb_mboot_ptr)$/;"	f
gs	include/mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
heap_alloc_page	x86_64/heap.c	/^void *heap_alloc_page(void)$/;"	f
heap_base	x86_64/heap.c	/^uintptr_t heap_base, heap_end; $/;"	v
heap_end	x86_64/heap.c	/^uintptr_t heap_base, heap_end; $/;"	v
i	x86_64/cstart.S	/^	i = i + 1$/;"	d
i	x86_64/cstart.S	/^i = 0$/;"	d
icr_write	x86_64/apic.c	/^    void (*icr_write)(u32 val, u32 dest);$/;"	m	struct:apic_ops	file:
id	x86_64/apic.c	/^    u32 (*id)(void);$/;"	m	struct:apic_ops	file:
imcrp	include/mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	include/io.h	/^static inline uint8_t inb(unsigned long port)$/;"	f
inb	include/io.h	6;"	d
inl	include/io.h	/^static inline uint32_t inl(unsigned long port)$/;"	f
inl	include/io.h	22;"	d
intena	include/proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inw	include/io.h	/^static inline uint16_t inw(unsigned long port)$/;"	f
inw	include/io.h	14;"	d
ioapic_read_redir	x86_64/apic.c	/^ioapic_redir_entry_t ioapic_read_redir(unsigned line)$/;"	f
ioapic_read_reg	x86_64/apic.c	/^u32 ioapic_read_reg(unsigned reg)$/;"	f
ioapic_redir_entry_t	include/apic.h	/^} ioapic_redir_entry_t;$/;"	t	typeref:struct:__anon1
ioapic_set_redir	x86_64/apic.c	/^void ioapic_set_redir(unsigned line, unsigned vec,$/;"	f
ioapic_write_redir	x86_64/apic.c	/^void ioapic_write_redir(unsigned line, ioapic_redir_entry_t e)$/;"	f
ioapic_write_reg	x86_64/apic.c	/^void ioapic_write_reg(unsigned reg, u32 value)$/;"	f
ioapicid	x86_64/mp.c	/^uchar ioapicid;$/;"	v
iomb	include/mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
is_transmit_empty	x86_64/serial.c	/^static inline int is_transmit_empty()$/;"	f	file:
killed	include/proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kstack	include/proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
lapic	x86_64/apic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	include/mp.h	/^  uint32_t lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapicid	x86_64/apic.c	/^lapicid(void)$/;"	f
ldt	include/mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
length	include/mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	include/mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
length	include/multiboot.h	/^    uint64_t length;$/;"	m	struct:mmap_entry_t
lim_15_0	include/mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	include/mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	include/mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
list_apicid	x86_64/main.c	/^static void list_apicid(void)$/;"	f	file:
lock	x86_64/console.c	/^static struct spinlock lock;$/;"	v	typeref:struct:spinlock	file:
lock	x86_64/serial.c	/^static struct spinlock lock;$/;"	v	typeref:struct:spinlock	file:
main	x86_64/main.c	/^int main(void *mb_info, int magic)$/;"	f
mask	include/apic.h	/^    uint8_t mask:1;$/;"	m	struct:__anon1
mask_pic_interrupts	x86_64/apic.c	/^void mask_pic_interrupts(void)$/;"	f
mb_boot_info	x86_64/cstart.S	/^mb_boot_info:   .quad 0$/;"	l
mb_magic	x86_64/cstart.S	/^mb_magic:	.quad 0$/;"	l
mbi_bootinfo	include/multiboot.h	/^struct mbi_bootinfo {$/;"	s
mem_lower	include/multiboot.h	/^        u32 mem_lower;$/;"	m	struct:mbi_bootinfo
mem_upper	include/multiboot.h	/^        u32 mem_upper;$/;"	m	struct:mbi_bootinfo
memchr	lib/string.c	/^void *memchr(const void *s, int c, size_t n)$/;"	f
memcmp	lib/string.c	/^int memcmp(const void *s1, const void *s2, size_t n)$/;"	f
memcpy	lib/string.c	/^void *memcpy(void *dest, const void *src, size_t n)$/;"	f
memmove	lib/string.c	/^void *memmove(void *dest, const void *src, size_t n)$/;"	f
memset	lib/string.c	/^void *memset(void *s, int c, size_t n)$/;"	f
mmap_addr	include/multiboot.h	/^        u32 mmap_addr;$/;"	m	struct:mbi_bootinfo
mmap_entry_t	include/multiboot.h	/^typedef struct mmap_entry_t$/;"	s
mmap_entry_t	include/multiboot.h	/^}__attribute__((packed)) mmap_entry_t;$/;"	t	typeref:struct:mmap_entry_t
mmap_length	include/multiboot.h	/^	u32 mmap_length;$/;"	m	struct:mbi_bootinfo
mods_addr	include/multiboot.h	/^        u32 mods_addr;$/;"	m	struct:mbi_bootinfo
mods_count	include/multiboot.h	/^        u32 mods_count;$/;"	m	struct:mbi_bootinfo
mp	include/mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	include/mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	x86_64/mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	x86_64/main.c	/^mpenter(void)$/;"	f	file:
mpinit	x86_64/mp.c	/^mpinit(void)$/;"	f
mpioapic	include/mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpproc	include/mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	x86_64/mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	x86_64/mp.c	/^mpsearch1(phys_addr_t a, int len)$/;"	f	file:
mycpu	x86_64/proc.c	/^struct cpu* mycpu(void)$/;"	f
name	include/proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
ncli	include/proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	x86_64/mp.c	/^int ncpu;$/;"	v
new_line	x86_64/console.c	/^static void new_line()$/;"	f	file:
npad	lib/printf.c	/^    int npad;$/;"	m	struct:strprops	file:
oemlength	include/mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	include/mp.h	/^  uint32_t oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
off_15_0	include/mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	include/mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
ofile	include/proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
outb	include/io.h	/^static inline void outb(uint8_t value, unsigned long port)$/;"	f
outb	include/io.h	30;"	d
outb	x86_64/apic.c	/^static void outb(unsigned char data, unsigned short port)$/;"	f	file:
outbs	include/io.h	/^static inline void outbs(char *buf, unsigned long len, unsigned long port)$/;"	f
outbs	include/io.h	48;"	d
outl	include/io.h	/^static inline void outl(uint32_t value, unsigned long port)$/;"	f
outl	include/io.h	42;"	d
outw	include/io.h	/^static inline void outw(uint16_t value, unsigned long port)$/;"	f
outw	include/io.h	36;"	d
p	include/mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	include/mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
pad	lib/printf.c	/^    char pad;$/;"	m	struct:strprops	file:
padding1	include/mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding10	include/mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	include/mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding3	include/mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding4	include/mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding5	include/mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding6	include/mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding7	include/mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	include/mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	include/mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
parent	include/proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
pause	include/processor.h	/^static inline void pause(void)$/;"	f
pde_t	include/types.h	/^typedef uint pde_t;$/;"	t
pgdir	include/proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
phys_addr_t	include/types.h	/^typedef uint64_t		phys_addr_t;$/;"	t
phys_to_virt	include/io.h	/^static inline void *phys_to_virt(unsigned long phys)$/;"	f
phys_to_virt	include/io.h	62;"	d
physaddr	include/mp.h	/^  uint32_t physaddr;               \/\/ phys addr of MP config table, 32bits$/;"	m	struct:mp
pid	include/proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
polarity	include/apic.h	/^    uint8_t polarity:1;$/;"	m	struct:__anon1
prepare_64	x86_64/cstart.S	/^prepare_64:$/;"	l
print_binstr	lib/printf.c	/^void print_binstr(unsigned long x)$/;"	f
print_int	lib/printf.c	/^static void print_int(pstream_t *ps, long long n, int base, strprops_t props)$/;"	f	file:
print_serial	x86_64/serial.c	/^static void print_serial(const char *buf)$/;"	f	file:
print_stack	lib/stack.c	/^static void print_stack(const void **return_addrs, int depth,$/;"	f	file:
print_str	lib/printf.c	/^static void print_str(pstream_t *p, const char *s, strprops_t props)$/;"	f	file:
print_unsigned	lib/printf.c	/^static void print_unsigned(pstream_t *ps, unsigned long long n, int base,$/;"	f	file:
printf	lib/printf.c	/^int printf(const char *fmt, ...)$/;"	f
proc	include/proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	include/proc.h	/^struct proc {$/;"	s
procstate	include/proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	include/mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
pstream	lib/printf.c	/^typedef struct pstream {$/;"	s	file:
pstream_t	lib/printf.c	/^} pstream_t;$/;"	t	typeref:struct:pstream	file:
pt_root	x86_64/cstart.S	/^pt_root:        .quad ptl4$/;"	l
pte_t	include/mmu.h	/^typedef uint pte_t;$/;"	t
ptl2	x86_64/cstart.S	/^ptl2:$/;"	l
ptl3	x86_64/cstart.S	/^ptl3:$/;"	l
ptl4	x86_64/cstart.S	/^ptl4:$/;"	l
puts	x86_64/serial.c	/^void puts(const char *s)$/;"	f
rdmsr	include/processor.h	/^static inline u64 rdmsr(u32 index)$/;"	f
read_cr0	include/processor.h	/^static inline ulong read_cr0(void)$/;"	f
read_cr2	include/processor.h	/^static inline ulong read_cr2(void)$/;"	f
read_cr3	include/processor.h	/^static inline ulong read_cr3(void)$/;"	f
read_cr4	include/processor.h	/^static inline ulong read_cr4(void)$/;"	f
read_cr8	include/processor.h	/^static inline ulong read_cr8(void)$/;"	f
read_cs	include/processor.h	/^static inline u16 read_cs(void)$/;"	f
readeflags	include/processor.h	/^readeflags(void)$/;"	f
reg_read	x86_64/apic.c	/^    u32 (*reg_read)(unsigned reg);$/;"	m	struct:apic_ops	file:
reg_write	x86_64/apic.c	/^    void (*reg_write)(unsigned reg, u32 val);$/;"	m	struct:apic_ops	file:
remain	lib/printf.c	/^    int remain;$/;"	m	struct:pstream	file:
remote_irr	include/apic.h	/^    uint8_t remote_irr:1;$/;"	m	struct:__anon1
reserve	include/apic.h	/^    uint8_t reserve:7;$/;"	m	struct:__anon1
reserved	include/apic.h	/^    uint8_t reserved[4];$/;"	m	struct:__anon1
reserved	include/mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	include/mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	include/mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
reserved	include/multiboot.h	/^        u32 reserved[4];   \/* 28-39 *\/$/;"	m	struct:mbi_bootinfo
reserved0	include/multiboot.h	/^        u32 reserved0[3];  \/* 52-63 *\/$/;"	m	struct:mbi_bootinfo
reserved1	include/multiboot.h	/^        u32 reserved1[5];  \/* 68-87 *\/$/;"	m	struct:mbi_bootinfo
reset_apic	x86_64/apic.c	/^void reset_apic(void)$/;"	f
rsv1	include/mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	include/mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
s	include/mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	include/mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s16	include/types.h	/^typedef int16_t         s16;$/;"	t
s32	include/types.h	/^typedef int32_t         s32;$/;"	t
s64	include/types.h	/^typedef int64_t         s64;$/;"	t
s8	include/types.h	/^typedef int8_t          s8; $/;"	t
scheduler	include/proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
segdesc	include/mmu.h	/^struct segdesc {$/;"	s
serial_init	x86_64/serial.c	/^void serial_init(void)$/;"	f
serial_inited	x86_64/serial.c	/^static int serial_inited = 0;$/;"	v	file:
serial_iobase	x86_64/serial.c	/^static int serial_iobase = 0x3f8;$/;"	v	file:
serial_outb	x86_64/serial.c	/^static void serial_outb(char ch)$/;"	f	file:
serial_putc	x86_64/serial.c	/^void serial_putc(char ch) $/;"	f
set_irq_line	x86_64/apic.c	/^void set_irq_line(unsigned line, int val)$/;"	f
set_mask	x86_64/apic.c	/^void set_mask(unsigned line, int mask)$/;"	f
signature	include/mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	include/mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	include/mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
simple_glob	lib/string.c	/^bool simple_glob(const char *text, const char *pattern)$/;"	f
size	include/multiboot.h	/^        u32 size;$/;"	m	struct:mbi_bootinfo
size	include/multiboot.h	/^    uint32_t size; $/;"	m	struct:mmap_entry_t
size_t	include/types.h	/^typedef unsigned long		size_t;$/;"	t
slot_from_xy	x86_64/console.c	/^static inline uint16_t *slot_from_xy(unsigned int x, unsigned int y)$/;"	f	file:
snprintf	lib/printf.c	/^int snprintf(char *buf, int size, const char *fmt, ...)$/;"	f
specrev	include/mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	x86_64/entryother.S	/^spin:$/;"	l
spin_lock	include/spinlock.h	/^static inline void spin_lock(struct spinlock *lock)$/;"	f
spin_unlock	include/spinlock.h	/^static inline void spin_unlock(struct spinlock *lock)$/;"	f
spinlock	include/spinlock.h	/^struct spinlock {$/;"	s
ss	include/mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss0	include/mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	include/mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	include/mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
stacktop	x86_64/cstart.S	/^stacktop:$/;"	l
start	x86_64/entryother.S	/^start:$/;"	l
start32	x86_64/entryother.S	/^start32:$/;"	l
start64	x86_64/cstart.S	/^start64:$/;"	l
started	include/proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	x86_64/main.c	/^static void startothers(void)$/;"	f	file:
state	include/proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
sti	include/processor.h	/^static inline void sti(void)$/;"	f
strcat	lib/string.c	/^char *strcat(char *dest, const char *src)$/;"	f
strchr	lib/string.c	/^char *strchr(const char *s, int c)$/;"	f
strcmp	lib/string.c	/^int strcmp(const char *a, const char *b)$/;"	f
strcpy	lib/string.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strlen	lib/string.c	/^unsigned long strlen(const char *buf)$/;"	f
strncmp	lib/string.c	/^int strncmp(const char *a, const char *b, size_t n)$/;"	f
strprops	lib/printf.c	/^typedef struct strprops {$/;"	s	file:
strprops_t	lib/printf.c	/^} strprops_t;$/;"	t	typeref:struct:strprops	file:
strstr	lib/string.c	/^char *strstr(const char *s1, const char *s2)$/;"	f
sum	x86_64/mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
sz	include/proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	include/mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
taskstate	include/mmu.h	/^struct taskstate {$/;"	s
tf	include/proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
trig_mode	include/apic.h	/^    uint8_t trig_mode:1;$/;"	m	struct:__anon1
trigger_mode	include/apic.h	/^typedef enum trigger_mode {$/;"	g
trigger_mode_t	include/apic.h	/^} trigger_mode_t;$/;"	t	typeref:enum:trigger_mode
true	include/types.h	16;"	d
ts	include/proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
type	include/mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	include/mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	include/mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	include/mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	include/mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	include/multiboot.h	/^    uint32_t type;$/;"	m	struct:mmap_entry_t
u16	include/types.h	/^typedef uint16_t        u16;$/;"	t
u32	include/types.h	/^typedef uint32_t        u32;$/;"	t
u64	include/types.h	/^typedef uint64_t        u64;$/;"	t
u8	include/types.h	/^typedef uint8_t         u8; $/;"	t
uchar	include/types.h	/^typedef unsigned char  uchar;$/;"	t
uint	include/types.h	/^typedef unsigned int   uint;$/;"	t
uintptr_t	include/types.h	/^typedef unsigned long		uintptr_t;$/;"	t
ulong	include/types.h	/^typedef unsigned long   ulong;$/;"	t
ushort	include/types.h	/^typedef unsigned short ushort;$/;"	t
v	include/spinlock.h	/^    unsigned int v;$/;"	m	struct:spinlock
vector	include/apic.h	/^    uint8_t vector;$/;"	m	struct:__anon1
version	include/mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	include/mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	include/mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
vga	x86_64/console.c	/^static uint16_t *vga = (uint16_t *)0xb8000;$/;"	v	file:
virt_to_phys	include/io.h	/^static inline unsigned long virt_to_phys(const void *virt)$/;"	f
virt_to_phys	include/io.h	56;"	d
vprintf	lib/printf.c	/^int vprintf(const char *fmt, va_list va)$/;"	f
vsnprintf	lib/printf.c	/^int vsnprintf(char *buf, int size, const char *fmt, va_list va)$/;"	f
wait	x86_64/serial.c	/^void wait()$/;"	f
write_cr0	include/processor.h	/^static inline void write_cr0(ulong val)$/;"	f
write_cr2	include/processor.h	/^static inline void write_cr2(ulong val)$/;"	f
write_cr3	include/processor.h	/^static inline void write_cr3(ulong val)$/;"	f
write_cr4	include/processor.h	/^static inline void write_cr4(ulong val)$/;"	f
write_cr8	include/processor.h	/^static inline void write_cr8(ulong val)$/;"	f
write_reg	x86_64/console.c	/^static void write_reg(char reg, char val)$/;"	f	file:
wrmsr	include/processor.h	/^static inline void wrmsr(u32 index, u64 val)$/;"	f
x2apic_icr_write	x86_64/apic.c	/^static void x2apic_icr_write(u32 val, u32 dest)$/;"	f	file:
x2apic_id	x86_64/apic.c	/^static uint32_t x2apic_id(void)$/;"	f	file:
x2apic_ops	x86_64/apic.c	/^static const struct apic_ops x2apic_ops = {$/;"	v	typeref:struct:apic_ops	file:
x2apic_read	x86_64/apic.c	/^static u32 x2apic_read(unsigned reg)$/;"	f	file:
x2apic_write	x86_64/apic.c	/^static void x2apic_write(unsigned reg, u32 val)$/;"	f	file:
xapic_icr_write	x86_64/apic.c	/^static void xapic_icr_write(u32 val, u32 dest)$/;"	f	file:
xapic_id	x86_64/apic.c	/^static uint32_t xapic_id(void)$/;"	f	file:
xapic_ops	x86_64/apic.c	/^static const struct apic_ops xapic_ops = {$/;"	v	typeref:struct:apic_ops	file:
xapic_read	x86_64/apic.c	/^static u32 xapic_read(unsigned reg)$/;"	f	file:
xapic_write	x86_64/apic.c	/^static void xapic_write(unsigned reg, u32 val)$/;"	f	file:
xchecksum	include/mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xlength	include/mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
